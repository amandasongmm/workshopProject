% mySanityCheck.m

clear all; close all; clc;

%% Generate simulation data.
featureMatrix_GT = round(abs(rands(2222,9)));
userMatrix_GT = round(abs(rands(200,9)));
Y = featureMatrix_GT * userMatrix_GT';
% R = round(abs(rand(size(Y))));
% Y = Y.*R;

%% Split test, cv and training set
trainRatio = 0.8; crossRatio = 0.1; testRatio = 0.1;
[trainYnorm, trainYmean, trainSetR, crossInd, crossGT, testInd, testGT] = myPack.splitSet(Y, R, trainRatio, crossRatio, testRatio);

%% Initialize params
% specify X and Theta
X = featureMatrix_GT; 
[~, num_users] = size(Y);
num_features = size(X, 2);
init_theta = randn(num_users, num_features);
init_params = [Theta(:)];

costFunction = @(t)linearRegCostFunction()

maxItr = 3000;
options = optimset('GradObj', 'on', 'MaxIter', maxItr);

% %% Test performance
[MSR, prediction, dif] = myPack.predictionError(X, Theta, R, trainYmean, testInd, testGT);
fprintf('Test set. mean squared error = %4.2f.\n',MSR);



